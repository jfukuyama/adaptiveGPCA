quit()
n
quit()
n
library(phyloseqDPCoA)
library(abt)
data(abt)
library(ape)
delta = cophenetic(phy_tree(abt))
dim(delta)
corner(delta)
head(sort(delta[-2]))
head(sort(delta[-i], decreasing = TRUE))
head(sort(delta[-2], decreasing = TRUE))
quit()
n
?compute.brlen
names(phy_tree(abt.small))
head(phy_tree(abt.small)$edge.length)
str(phy_tree(abt.small))
head(phy_tree(abt.small)$edge)
abt.small
phy_tree(abt.small)
head(newedges)
head(nodes.edges)
head(nodes.edges)
summary(nodes.edges[,1])
summary(nodes.edges[,2])
sum(nodes.edges[,2] <= 210)
head(edges)
?comput.brlen
library(ape)
plot_tree(phy_tree(abt.small.lambda))
dev.new()
plot_tree(phy_tree(abt.small))
ls()
?svm
library(kernlab)
?svm
library(e1071)
?svm
library(ISLR)

set.seed(3)

med.mpg <- median(Auto$mpg)
Auto <- transform(Auto, mpg.high = ifelse(mpg >= med.mpg, 1, 0))

auto.tune <- tune(svm, mpg.high ~ . - mpg, data=Auto, kernel="linear",
  ranges=list(cost=c(0.001, 0.01, 0.1, 1,5,10,100)))

summary(auto.tune)
auto.tune <- tune(svm, mpg.high ~ . - mpg, data=Auto, kernel="linear",
  ranges=list(cost=c(0.001, 0.01, 0.1, 1,5,10,100)))

summary(auto.tune)

names(Auto)
head(Auto$mpg.high)
Auto$mpg.high = as.factor(Auto$mpg.high)
auto.tune <- tune(svm, mpg.high ~ . - mpg, data=Auto, kernel="linear",
  ranges=list(cost=c(0.001, 0.01, 0.1, 1,5,10,100)))

summary(auto.tune)

auto.tune <- tune(svm, mpg.high ~ . - mpg, data=Auto, kernel="linear",
  ranges=list(cost=c(0.001, 0.01, 0.1, 1,5,10,100)))

summary(auto.tune)

auto.tune <- tune(svm, mpg.high ~ . - mpg, data=Auto, kernel="linear",
  ranges=list(cost=c(0.001, 0.01, 0.1, 1,5,10,100)))

summary(auto.tune)

auto.tune <- tune(svm, mpg.high ~ . - mpg, data=Auto, kernel="linear",
  ranges=list(cost=c(0.001, 0.01, 0.1, 1,5,10,100)))

summary(auto.tune)

auto.tune <- tune(svm, mpg.high ~ . - mpg, data=Auto, kernel="linear",
  ranges=list(cost=c(0.001, 0.01, 0.1, 1,5,10,100)))

summary(auto.tune)

data(Auto)
names(Auto)
auto.tune = tune(svm, mpg ~ ., data = Auto, kernel = "linear", ranges = list(cost = c(.001, .01, .1, 1, 5, 10, 100)))
summary(auto.tune)
set.seed(3)

med.mpg <- median(Auto$mpg)
Auto <- transform(Auto, mpg.high = ifelse(mpg >= med.mpg, 1, 0))

auto.tune <- tune(svm, mpg.high ~ . - mpg, data=Auto, kernel="linear",
  ranges=list(cost=c(0.001, 0.01, 0.1, 1,5,10,100)))

summary(auto.tune)
set.seed(3)

med.mpg <- median(Auto$mpg)
Auto <- transform(Auto, mpg.high = ifelse(mpg >= med.mpg, 1, 0))

auto.tune <- tune(svm, mpg.high ~ . - mpg, data=Auto, kernel="linear",
  ranges=list(cost=c(0.001, 0.01, 0.1, 1,5,10,100)))

auto.tune <- tune(svm, factor(mpg.high) ~ . - mpg, data=Auto, kernel="linear",
ranges=list(cost=c(0.001, 0.01, 0.1, 1,5,10,100)))
summary(auto.tune)
quit()
n
library(phyloseqDPCoA)
betweenDPCoA
betweenMatrix
phyloseqDPCoA:::betweenMatrix
constrainedDPCoA
DPCoA
getVarianceProportions
phyloseqDPCoA:::getVarianceProportions
gpcaWrapper
phyloseqDPCoA:::gpcaWrapper
phyloseqDPCoA:::normalizeMatrix
phyloseqDPCoA:::phyloseqDPCoA
phyloseqDPCoA:::plot_ord_dpcoa
phyloseqDPCoA:::processGPCA
phyloseqDPCoA:::processPhyseq
phyloseqDPCoA:::processSPCOutput
phyloseqDPCoA:::projectMatrix
phyloseqDPCoA:::sigmaFromTree
sparseBetweenDPCoA
phyloseqDPCoA:::sparseBetweenDPCoASPC
phyloseqDPCoA:::sparseConstrainedDPCoA
phyloseqDPCoA:::sparseDPCoA
sparseDPCoASPC
sparseWithinDPCoA
sparseWithinDPCoASPC
withinDPCoA
phyloseqDPCoA:::withinMatrix
quit()
n
library(sGPCA)
?sgpca
data(abt)
library(phyloseqDPCoA)
data(abt)
simulation_method = "latentVariableSim"
simulation_args = list(ntaxa = 200, nsamples = 50,
    base_distr = "baseAbundances", sparse_distr = "sparseAbundancesGrouped",
    base_distr_args = list(),
    sparse_distr_args = list(nselect = 16, ngroups = 2, coefvalues = c(-3:-1, 1:3)))

ordination_method = "sparseDPCoA"
ordination_args = list(k = 2)
ordination_args = list(k = 1)
ordination_args = list(k = 1, lamv = 1)
quit()
n
library(phyloseqDPCoA)
simulation_method = "latentVariableSim"
simulation_args = list(ntaxa = 200, nsamples = 50,
    base_distr = "baseAbundances", sparse_distr = "sparseAbundancesGrouped",
    base_distr_args = list(),
    sparse_distr_args = list(nselect = 16, ngroups = 2, coefvalues = c(-3:-1, 1:3)))
ordination_method = sparseDPCoA
ordination_args = list(k = 2, lamv = 1)
ordination_args
sparseDPCoA(phy, k = 1, lamv = .01)
sparseDPCoA
plot_tree(phy)
ordination_args
ordination_args$lamv = .01
ordination_args = list(k = 1)
ord.out
str(ord.out)
summary(ord.out$V)
table(called_nonzero, true_nonzero)
table(called_nonzero, true_nonzero)
?sgpca
physeq = phy
k = 1
constraints = NULL
sparse = TRUE
sigma = NULL
out.gpca = sgpca(input$X, R = input$sigma, Q = as(input$D, "dgCMatrix"), K = 1, full.path = TRUE)
library(sGPCA)
out.gpca = sgpca(input$X, R = input$sigma, Q = as(input$D, "dgCMatrix"), K = 1, full.path = TRUE)
out.gpca
str(out.gpca)
n = 20
lamvs
i = 1
lamv
lamvs[i]
head(roc_mat)
i = 20
tail(roc_mat)
library(ggplot2)
head(roc_mat)
head(roc_mat)
tail(roc_mat)
roc_mat
roc_mat
i = 1
rocCurveSGPCA
quit()
n
library(phyloseq)
library(phyloseqDPCoA)
library(phylotreeplot)
load("~/Dropbox/packages/resilienceAnalysis/data/resilience_phyloseq.RData")
bsublog = prune_samples(rowSums(otu_table(bsub)) > 50000, bsublog)
bsublog = prune_taxa(colSums(otu_table(bsub) > 3) >= 10, bsublog)
out.sdpcoa = sdpcoa(bsublog, K = 2, s = .01)
out.sdpcoa = phyloseqDPCoA:::sdpcoa(bsublog, K = 2, s = .01)
out.sdpcoa = sdpcoa(bsublog, K = 2, s = 10)
Q = sigmaFromTree(phy_tree(bsublog))
Q = sigmaFromTree(phy_tree(bsublog), scale = FALSE)
Qeig = eigen(Q, symmetric = TRUE)
out.sdpcoa = sdpcoa(bsublog, K = 2, s = 10, Qsqrt = Qsqrt)
out.sdpcoa = sdpcoa(bsublog, K = 2, s = 10, Qsqrt = Qsqrt)
bsublog = prune_taxa(colSums(otu_table(bsub) > 5) >= 20, bsublog)
bsublog = prune_taxa(colSums(exp(otu_table(bsublog)) - 1 > 5) >= 20, bsublog)
bsublog
out.sdpcoa = sdpcoa(bsublog, K = 2, s = 10)
library(glmnet)
out.sdpcoa = sdpcoa(bsublog, K = 2, s = 10)
colSums(out.dpcoa$V != 0)
colSums(out.sdpcoa$V != 0)
plot_tree_and_data(phy_tree(bsublog), out.sdpcoa$V)
plot_tree_and_data(phy_tree(bsublog), out.sdpcoa$V, ladderize = TRUE)
out.sdpcoa = sdpcoa(bsublog, K = 2, s = 1)
colSums(out.dpcoa$V != 0)
colSums(out.sdpcoa$V != 0)
plot_tree_and_data(phy_tree(bsublog), out.sdpcoa$V)
plot_tree_and_data(phy_tree(bsublog), out.sdpcoa$V, ladderize = TRUE)
df = data.frame(sample_data(bsublog), otu_table(bsublog) %*% Q %*% out.sdpcoa$V)
Q = sigmaFromTree(phy_tree(bsublog), scale = FALSE)
df = data.frame(sample_data(bsublog), otu_table(bsublog) %*% Q %*% out.sdpcoa$V)
ggplot(df) + geom_point(aes(x = X1, y = X2)) + facet_wrap(~ SubjectID)
ggplot(df) + geom_point(aes(x = X1, y = X2, color = PreImmPostPost)) + facet_wrap(~ SubjectID)
out.wit = sdpcoaWithin(bsublog, sample_data(bsublog)$SubjectID, 2, .01)
colSums(out.wit$V != 0)
plot_tree_and_data(phy_tree(bsublog), out.wit$V, ladderize = TRUE)
df = data.frame(sample_data(bsublog), otu_table(bsublog) %*% Q %*% out.sdpcoa$V, FirstTwoDays = sample_data(bsublog)$RelativeDay %in% 0:1)
ggplot(df) + geom_point(aes(x = X1, y = X2, color =FirstTwoDays)) + facet_wrap(~ SubjectID)
load("~/Dropbox/packages/resilienceAnalysis/data/resilience_phyloseq.RData")
bsublog = prune_samples(rowSums(otu_table(bsub)) > 50000, bsublog)
bsublog = prune_taxa(colSums(otu_table(bsub) > 3) >= 10, bsublog)
Q = sigmaFromTree(phy_tree(bsublog), scale = FALSE)
out.wit = sdpcoaWithin(bsublog, sample_data(bsublog)$SubjectID, 2, .05)
colSums(out.wit$V != 0)
plot_tree_and_data(phy_tree(bsublog), out.wit$V, ladderize = TRUE)
df = data.frame(sample_data(bsublog), otu_table(bsublog) %*% Q %*% out.wit$V)
ggplot(df) + geom_point(aes(x = X1, y = X2, color = PreImmPostPost)) + facet_wrap(~ SubjectID)
df = data.frame(sample_data(bsublog), otu_table(bsublog) %*% Q %*% out.wit$V, FirstTwoDays = sample_data(bsublog)$RelativeDay %in% 0:1)
ggplot(df) + geom_point(aes(x = X1, y = X2, color = FirstTwoDays)) + facet_wrap(~ SubjectID)
out.wit = sdpcoaWithin(bsublog, sample_data(bsublog)$SubjectID, 2, .1)
out.wit$variances
colSums(out.wit$V != 0)
plot_tree_and_data(phy_tree(bsublog), out.wit$V, ladderize = TRUE)
df = data.frame(sample_data(bsublog), otu_table(bsublog) %*% Q %*% out.wit$V, FirstTwoDays = sample_data(bsublog)$RelativeDay %in% 0:1)
corner(otu_table(bsublog))
bsublog
ggplot(df) + geom_point(aes(x = X1, y = X2, color = FirstTwoDays)) + facet_wrap(~ SubjectID)
out.dpcoa = sdpcoa(bsublog, sample_data(bsublog)$SubjectID, 2, .1)
o
out.dpcoa = sdpcoa(bsublog, K = 2, .1)
colSums(out.dpcoa$V != 0)
plot_tree_and_data(phy_tree(bsublog), out.dpcoa$V, ladderize = TRUE)
df = data.frame(sample_data(bsublog), otu_table(bsublog) %*% Q %*% out.dpcoa$V, FirstTwoDays = sample_data(bsublog)$RelativeDay %in% 0:1)
ggplot(df) + geom_point(aes(x = X1, y = X2, color =FirstTwoDays)) + facet_wrap(~ SubjectID)
out.dpcoa = sdpcoa(bsublog, K = 2, 10)
out.dpcoa = sdpcoa(bsublog, K = 2, 2)
data(abt)
sample_data(abt)$condition = factor(sample_data(abt)$condition,
                    levels = c("Pre Cp", "1st Cp", "1st WPC", "Interim", "2nd Cp", "2nd WPC", "Post Cp"))
abt = prune_taxa(taxa_sums(abt) > 5, abt)
abt.small = prune_taxa(taxa_sums(abt) > 1000, abt)
abt = transform_sample_counts(abt, function(x) log(1 + x))
abt.small = transform_sample_counts(abt.small, function(x) log(1 + x))
abt
abt
abt.small
out.dpcoa = sdpcoa(abt.small, K = 2, .2)
colSums(out.dpcoa$V != 0)
out.dpcoa = sdpcoa(abt.small, K = 2, 2)
colSums(out.dpcoa$V != 0)
plot_tree_and_data(phy_tree(abt.small), out.dpcoa$V, ladderize = TRUE)
df = data.frame(sample_data(abt.small), otu_table(abt.small) %*% Q %*% out.dpcoa$V)
Q = sigmaFromTree(phy_tree(abt.small), scale = FALSE)
df = data.frame(sample_data(abt.small), otu_table(abt.small) %*% Q %*% out.dpcoa$V)
corner(otu_table(abt.small))
df = data.frame(sample_data(abt.small), t(otu_table(abt.small)) %*% Q %*% out.dpcoa$V)
ggplot(df) + geom_point(aes(x = X1, y = X2, color = ind)) + facet_wrap(~condition)
out.dpcoa = sdpcoa(abt.small, K = 2, 10)
colSums(out.dpcoa$V != 0)
plot_tree_and_data(phy_tree(bsublog), out.dpcoa$V, ladderize = TRUE)
plot_tree_and_data(phy_tree(abt.small), out.dpcoa$V, ladderize = TRUE)
df = data.frame(sample_data(abt.small), otu_table(abt.small) %*% Q %*% out.dpcoa$V)
df = data.frame(sample_data(abt.small), t(otu_table(abt.small)) %*% Q %*% out.dpcoa$V)
ggplot(df) + geom_point(aes(x = X1, y = X2, color = ind)) + facet_wrap(~condition)
plot_tree_and_data(phy_tree(abt.small), out.dpcoa$V, ladderize = TRUE)
out.dpcoa = sdpcoa(abt.small, K = 2, 5)
colSums(out.dpcoa$V != 0)
plot_tree_and_data(phy_tree(abt.small), out.dpcoa$V, ladderize = TRUE)
df = data.frame(sample_data(abt.small), t(otu_table(abt.small)) %*% Q %*% out.dpcoa$V)
ggplot(df) + geom_point(aes(x = X1, y = X2, color = ind)) + facet_wrap(~condition)
out.dpcoa = sdpcoa(abt, K = 2, 5)
colSums(out.dpcoa$V != 0)
plot_tree_and_data(phy_tree(abt), out.dpcoa$V, ladderize = TRUE)
df = data.frame(sample_data(abt), t(otu_table(abt)) %*% Q %*% out.dpcoa$V)
Qabt = sigmaFromTree(abt, scale = FALSE)
Qabt = sigmaFromTree(phy_tree(abt), scale = FALSE)
df = data.frame(sample_data(abt), t(otu_table(abt)) %*% Qabt %*% out.dpcoa$V)
ggplot(df) + geom_point(aes(x = X1, y = X2, color = ind)) + facet_wrap(~condition)
out.dpcoa = sdpcoa(abt, K = 2, 2.5)
colSums(out.dpcoa$V != 0)
plot_tree_and_data(phy_tree(abt), out.dpcoa$V, ladderize = TRUE)
df = data.frame(sample_data(abt), t(otu_table(abt)) %*% Qabt %*% out.dpcoa$V)
ggplot(df) + geom_point(aes(x = X1, y = X2, color = ind)) + facet_wrap(~condition)
pdf("sites_sdpcoa.pdf", width = 5, height = 4)
ggplot(df) + geom_point(aes(x = X1, y = X2, color = ind)) + facet_wrap(~condition)
dev.off()

getwd()
pdf("species_sdpcoa.pdf", width = 5, height = 4)
plot_tree_and_data(phy_tree(abt), out.dpcoa$V, ladderize = TRUE)
dev.off()

plot_tree_and_data(phy_tree(abt), out.dpcoa$V, ladderize = TRUE)
pdf("species_sdpcoa.pdf", width = 5, height = 4)
plot_tree_and_data(phy_tree(abt), out.dpcoa$V, ladderize = TRUE)
dev.off()

pdf("species_sdpcoa.pdf", width = 5, height = 4)
plot_tree_and_data(phy_tree(abt), out.dpcoa$V, ladderize = TRUE)
dev.off()

pdf("species_sdpcoa.pdf", width = 5, height = 4)
print(plot_tree_and_data(phy_tree(abt), out.dpcoa$V, ladderize = TRUE))
dev.off()

quit()
n
abt
c = cutree(phy_tree(abt), k = 1000)
?cutree
c = cutree(hclust(cophenetic(phy_tree(abt))), k = 1000)
library(ape)
plot(tree)
plot(tree, ladderize = TRUE)
plot_tree(tree, ladderize = TRUE)
cutree(tree, k = 50)
cutree(hclust(cophenetic(tree)), k = 50)
cophenetic(tree)
hclust(cophenetic(tree)
)
?hclust
hclust(as.dist(cophenetic(tree)))
cutree(hclust(as.dist(cophenetic(tree))), k = 40)
table(cutree(hclust(as.dist(cophenetic(tree))), k = 40))
table(cutree(hclust(as.dist(cophenetic(tree))), k = 30))
sort(table(cutree(hclust(as.dist(cophenetic(tree))), k = 30)))
sort(table(cutree(hclust(as.dist(cophenetic(tree))), k = 30)))
sort(table(cutree(hclust(as.dist(cophenetic(tree))), k = 30)))
sort(table(cutree(hclust(as.dist(cophenetic(tree))), k = 30)))
sort(table(cutree(hclust(as.dist(cophenetic(tree))), k = 25)))
sort(table(cutree(hclust(as.dist(cophenetic(tree))), k = 30)))
sort(table(cutree(hclust(as.dist(cophenetic(tree))), k = 20)))
sort(table(cutree(hclust(as.dist(cophenetic(tree))), k = 22)))
groups
sim_mc(100, 5, .05)
sim_mc(100, 5, .05)
ngroup = 5
i = 2
out[1] = 1
out = 1
1:ngroup[(1:ngroup) != out[i-1]]
(1:ngroup)[(1:ngroup) != out[i-1]]
sim_mc(100, 5, .05)
sim_mc(100, 5, .05)
sim_mc(100, 5, .9)
sim_mc(100, 5, .08)
sim_mc(100, 5, .5)
groups
g = 1
ptrans = .05
ntime = 100
dom
sum(groups == 1)
i = 1
out[i,which(groups == g)]
out
image(out)
image(m)
corner(dominant_taxa_mat)
image(m)
s = sigmaFromTree(tree)
e = eigen(s)
e$vectors[,1]
plot_tree_and_data(tree, e$vectors[,1:5], ladderize = TRUE)
plot_sparse_species(tree, model.matrix(~ 0 + as.factor(groups)))
plot_tree_and_data(tree, model.matrix(~ 0 + as.factor(groups)))
plot_tree_and_data(tree, data.frame(model.matrix(~ 0 + as.factor(groups))))
head(model.matrix(~ as.factor(groups)))
corner(model.matrix(~ 0 + as.factor(groups)))
dim(model.matrix(~ 0 + as.factor(groups)))
dim(data.frame(model.matrix(~ 0 + as.factor(groups))))
plot_tree_and_data(tree, data.frame(model.matrix(~ 0 + as.factor(groups))))
plot_tree_and_data
plot_tree(tree)
table(groups)
sort(table(groups))
c
dim(as.matrix(g, ncol = 1))
g
g
dim(as.matrix(g, ncol = 1))
c
dim(as.matrix(c, nrow = 1))
image(ab)
image(ab * m)
summary(as.vector(intensity))
summary(as.vector(intensity))
corner(counts)
?rpois
corner(counts)
?rnbinom
counts = apply(intensity, 1:2, function(x) rnbinom(1, mu = x, size = .01))
corner(counts)
counts = apply(intensity, 1:2, function(x) rnbinom(1, mu = x, size = .1))
corner(counts)
image(counts)
counts = apply(intensity, 1:2, function(x) rnbinom(1, mu = x, size = .5))
image(counts)
counts = apply(intensity, 1:2, function(x) rnbinom(1, mu = x, size = 50))
image(counts)
corner(counts)
corner(intensity)
corner(counts)
image(intensity)
image(counts)
par(mfrow = c(1,2))
image(intensity)
image(counts)
str(tree)
corner(counts)
baseDPCoA
dpcoaEig
dpcoaEvecs
processPhyseq
plot(out$U)
str(outpca)
str(outpca)
plot(outpca$li)
head(data.frame(outdpcoa$U, g))
dpcoaEig
head(outpca$li)
dpcoaEvecs
head(outdpcoa$U)
image(counts)
image(counts)
image(counts)
plot(e$values / (e$values * 100 + 1))
dev.off()


image(counts)
image(counts)
image(m)
image(m * ab)
?rpois
dim(counts)
dim(intensity)
image(counts)
plot(tree)
sort(table(groups))
groups
plot_sparse_species(tree, sp = groups == 18)
plot_sparse_species(tree, sp = data.frame(groups == 18, groups == 15))
dim(groupmat)
plot_sparse_species(tree, groupmat)
plot_sparse_species(tree, data.frame(groupmat))
plot_sparse_species(tree, as.matrix(groupmat))
dim(groupmat)
plot_sparse_species(tree, as.matrix(groupmat))
plot_sparse_species(tree, as.matrix(groupmat), tree.height = 20)
image(ab)
image(m)
corner(intensity)
summary(intensity)
summary(as.vector(intensity)
)
image(counts)
image(ab)
head(outpca$co)
dev.new()
?lda
?discrimin
quit()
n
